import 'dart:convert';
import 'dart:io';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../utils/api.dart';

/// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@pragma('vm:entry-point')
Future<void> firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  print('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.messageId}');
  await NotificationService.instance.showNotification(message);
}

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  static NotificationService get instance => _instance;
  NotificationService._internal();

  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final FlutterLocalNotificationsPlugin _localNotifications =
      FlutterLocalNotificationsPlugin();

  bool _isInitialized = false;
  String? _fcmToken;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      print('üîî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await _initializeLocalNotifications();

      // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      await _requestPermissions();

      // –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
      await _getFCMToken();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
      _setupMessageHandlers();

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      await _handleInitialMessage();

      _isInitialized = true;
      print('‚úÖ –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _initializeLocalNotifications() async {
    const androidSettings =
        AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    await _localNotifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Android
    if (Platform.isAndroid) {
      const channel = AndroidNotificationChannel(
        'naliv_orders',
        '–ó–∞–∫–∞–∑—ã Naliv',
        description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–æ–≤',
        importance: Importance.high,
        playSound: true,
        enableVibration: true,
      );

      await _localNotifications
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(channel);
    }
  }

  /// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> _requestPermissions() async {
    if (Platform.isIOS) {
      await _firebaseMessaging.requestPermission(
        alert: true,
        badge: true,
        sound: true,
        provisional: false,
      );
    }

    if (Platform.isAndroid) {
      final androidImplementation =
          _localNotifications.resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>();

      await androidImplementation?.requestNotificationsPermission();
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
  Future<void> _getFCMToken() async {
    try {
      _fcmToken = await _firebaseMessaging.getToken();
      if (_fcmToken != null) {
        print('üì± FCM Token: $_fcmToken');
        await _saveTokenToStorage(_fcmToken!);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        await _sendTokenToServer(_fcmToken!);
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞: $e');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    _firebaseMessaging.onTokenRefresh.listen((newToken) async {
      print('üîÑ –ù–æ–≤—ã–π FCM Token: $newToken');
      _fcmToken = newToken;
      await _saveTokenToStorage(newToken);
      await _sendTokenToServer(newToken);
    });
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  Future<void> _saveTokenToStorage(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('fcm_token', token);
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  Future<void> _sendTokenToServer(String token) async {
    try {
      print('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $token');

      final success = await ApiService.updateFCMToken(token);

      if (success) {
        print('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      } else {
        print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞: $e');
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  void _setupMessageHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ: ${message.messageId}');
      showNotification(message);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print('üîî –ù–∞–∂–∞—Ç–æ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message.messageId}');
      _handleNotificationTap(message);
    });

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    FirebaseMessaging.onBackgroundMessage(firebaseMessagingBackgroundHandler);
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
  Future<void> _handleInitialMessage() async {
    final initialMessage = await _firebaseMessaging.getInitialMessage();
    if (initialMessage != null) {
      print(
          'üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${initialMessage.messageId}');
      _handleNotificationTap(initialMessage);
    }
  }

  /// –ü–æ–∫–∞–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> showNotification(RemoteMessage message) async {
    try {
      final notification = message.notification;

      if (notification != null) {
        final androidDetails = AndroidNotificationDetails(
          'naliv_orders',
          '–ó–∞–∫–∞–∑—ã Naliv',
          channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–æ–≤',
          importance: Importance.high,
          priority: Priority.high,
          playSound: true,
          enableVibration: true,
          icon: '@mipmap/ic_launcher',
        );

        const iosDetails = DarwinNotificationDetails(
          presentAlert: true,
          presentBadge: true,
          presentSound: true,
        );

        final details = NotificationDetails(
          android: androidDetails,
          iOS: iosDetails,
        );

        await _localNotifications.show(
          message.hashCode,
          notification.title ?? 'Naliv',
          notification.body ?? '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
          details,
          payload: json.encode(message.data),
        );
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  void _onNotificationTapped(NotificationResponse response) {
    if (response.payload != null) {
      try {
        final data = json.decode(response.payload!);
        print('üîî –ù–∞–∂–∞—Ç–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏: $data');
        _handleNotificationData(data);
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
      }
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ Firebase —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  void _handleNotificationTap(RemoteMessage message) {
    print('üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message.data}');
    _handleNotificationData(message.data);
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  void _handleNotificationData(Map<String, dynamic> data) {
    final type = data['type'] ?? '';
    final orderId = data['order_id'];
    final businessId = data['business_id'];

    print(
        'üìã –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $type, Order ID: $orderId, Business ID: $businessId');

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    switch (type) {
      case 'order_status_change':
        // –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞
        _navigateToOrder(orderId);
        break;
      case 'promotion':
        // –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫—Ü–∏–π
        _navigateToPromotions(businessId);
        break;
      case 'delivery_update':
        // –û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥ –¥–æ—Å—Ç–∞–≤–∫–∏
        _navigateToDeliveryTracking(orderId);
        break;
      default:
        // –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        _navigateToHome();
        break;
    }
  }

  /// –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∑–∞–∫–∞–∑—É
  void _navigateToOrder(String? orderId) {
    if (orderId != null) {
      print('üöÄ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∑–∞–∫–∞–∑—É: $orderId');
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞
    }
  }

  /// –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∞–∫—Ü–∏—è–º
  void _navigateToPromotions(String? businessId) {
    if (businessId != null) {
      print('üöÄ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∞–∫—Ü–∏—è–º –º–∞–≥–∞–∑–∏–Ω–∞: $businessId');
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–∫—Ü–∏–π
    }
  }

  /// –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ç—Ä–µ–∫–∏–Ω–≥—É –¥–æ—Å—Ç–∞–≤–∫–∏
  void _navigateToDeliveryTracking(String? orderId) {
    if (orderId != null) {
      print('üöÄ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ç—Ä–µ–∫–∏–Ω–≥—É –∑–∞–∫–∞–∑–∞: $orderId');
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞
    }
  }

  /// –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
  void _navigateToHome() {
    print('üöÄ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π FCM —Ç–æ–∫–µ–Ω
  String? get fcmToken => _fcmToken;

  /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫
  Future<void> subscribeToTopic(String topic) async {
    try {
      await _firebaseMessaging.subscribeToTopic(topic);
      print('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫: $topic');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫ $topic: $e');
    }
  }

  /// –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–æ–ø–∏–∫–∞
  Future<void> unsubscribeFromTopic(String topic) async {
    try {
      await _firebaseMessaging.unsubscribeFromTopic(topic);
      print('‚úÖ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–æ–ø–∏–∫–∞: $topic');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ç–æ–ø–∏–∫–∞ $topic: $e');
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> clearAllNotifications() async {
    await _localNotifications.cancelAll();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ iOS)
  Future<int> getBadgeCount() async {
    if (Platform.isIOS) {
      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è iOS
      return 0;
    }
    return 0;
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ iOS)
  Future<void> setBadgeCount(int count) async {
    if (Platform.isIOS) {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É badge –¥–ª—è iOS
    }
  }
}
