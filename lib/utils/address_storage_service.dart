import 'dart:convert';
import 'dart:async';
import 'package:shared_preferences/shared_preferences.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class AddressStorageService {
  static const String _selectedAddressKey = 'selected_address';
  static const String _addressHistoryKey = 'address_history';
  static const String _isFirstLaunchKey = 'is_first_launch';

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  static Future<bool> isFirstLaunch() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_isFirstLaunchKey) ?? true;
  }

  /// –û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª–æ—Å—å
  static Future<void> markAsLaunched() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_isFirstLaunchKey, false);
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
  static Future<bool> hasSelectedAddress() async {
    final prefs = await SharedPreferences.getInstance();
    final addressJson = prefs.getString(_selectedAddressKey);
    final hasAddress = addressJson != null && addressJson.isNotEmpty;

    print('üîç AddressStorageService.hasSelectedAddress():');
    print('   addressJson: $addressJson');
    print('   hasAddress: $hasAddress');

    return hasAddress;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
  static Future<Map<String, dynamic>?> getSelectedAddress() async {
    final prefs = await SharedPreferences.getInstance();
    final addressJson = prefs.getString(_selectedAddressKey);

    if (addressJson != null && addressJson.isNotEmpty) {
      try {
        return json.decode(addressJson);
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: $e');
        return null;
      }
    }
    return null;
  }

  // StreamController –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
  static final StreamController<Map<String, dynamic>?>
      _selectedAddressController =
      StreamController<Map<String, dynamic>?>.broadcast();

  /// –ü–æ—Ç–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
  static Stream<Map<String, dynamic>?> get selectedAddressStream =>
      _selectedAddressController.stream;

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
  static Future<bool> saveSelectedAddress(Map<String, dynamic> address) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final addressJson = json.encode(address);
      final result = await prefs.setString(_selectedAddressKey, addressJson);
      // —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
      _selectedAddressController.add(address);
      return result;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: $e');
      return false;
    }
  }

  /// –£–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
  static Future<bool> removeSelectedAddress() async {
    final prefs = await SharedPreferences.getInstance();
    final result = await prefs.remove(_selectedAddressKey);
    // —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ —Å–±—Ä–æ—Å–µ
    _selectedAddressController.add(null);
    return result;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
  static Future<List<Map<String, dynamic>>> getAddressHistory() async {
    final prefs = await SharedPreferences.getInstance();
    final historyJson = prefs.getStringList(_addressHistoryKey) ?? [];

    try {
      return historyJson
          .map((item) => json.decode(item) as Map<String, dynamic>)
          .toList();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∞–¥—Ä–µ—Å–æ–≤: $e');
      return [];
    }
  }

  /// –î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥—Ä–µ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
  static Future<bool> addToAddressHistory(Map<String, dynamic> address) async {
    try {
      final history = await getAddressHistory();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
      final existingIndex = history.indexWhere((item) =>
          item['name'] == address['name'] &&
          item['point']['lat'] == address['point']['lat'] &&
          item['point']['lon'] == address['point']['lon']);

      if (existingIndex != -1) {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        history.removeAt(existingIndex);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      history.insert(0, address);

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
      if (history.length > 10) {
        history.removeRange(10, history.length);
      }

      final prefs = await SharedPreferences.getInstance();
      final historyJson = history.map((item) => json.encode(item)).toList();
      return await prefs.setStringList(_addressHistoryKey, historyJson);
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é: $e');
      return false;
    }
  }

  /// –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–¥—Ä–µ—Å–æ–≤
  static Future<bool> clearAddressHistory() async {
    final prefs = await SharedPreferences.getInstance();
    return await prefs.remove(_addressHistoryKey);
  }

  /// –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
  static Future<void> clearAllAddressData() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_selectedAddressKey);
    await prefs.remove(_addressHistoryKey);
  }
}
