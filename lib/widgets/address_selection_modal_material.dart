import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import '../utils/api.dart';
import '../utils/location_service.dart';
import '../utils/address_storage_service.dart';
import '../pages/map_address_page.dart';

/// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (Material Design)
class AddressSelectionModal extends StatefulWidget {
  final Function(Map<String, dynamic>) onAddressSelected;

  const AddressSelectionModal({
    super.key,
    required this.onAddressSelected,
  });

  @override
  State<AddressSelectionModal> createState() => _AddressSelectionModalState();
}

class _AddressSelectionModalState extends State<AddressSelectionModal> {
  bool _isLoadingLocation = false;
  bool _isSearching = false;
  String _searchQuery = '';
  String _locationAttemptStatus = '';
  List<Map<String, dynamic>> _searchResults = [];
  final TextEditingController _searchController = TextEditingController();
  final FocusNode _searchFocusNode = FocusNode();

  @override
  void dispose() {
    _searchController.dispose();
    _searchFocusNode.dispose();
    super.dispose();
  }

  /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–¥—Ä–µ—Å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  Future<void> _detectLocationAddress() async {
    setState(() {
      _isLoadingLocation = true;
      _locationAttemptStatus = '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...';
    });

    try {
      print('üåç –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');

      final locationService = LocationService.instance;

      // –°–Ω–∞—á–∞–ª–∞ —è–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      print('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é...');
      final permissionResult =
          await locationService.checkAndRequestPermissions();

      if (!permissionResult.success) {
        print('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã: ${permissionResult.message}');
        if (permissionResult.needsSettingsRedirect) {
          _showLocationErrorDialog();
        } else {
          // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –æ—à–∏–±–∫—É
          _showErrorDialog(
              '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞.');
        }
        return;
      }

      print('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPS —Å–µ—Ä–≤–∏—Å–æ–≤
      final isServiceEnabled = await locationService.isLocationServiceEnabled();
      if (!isServiceEnabled) {
        print('‚ùå –°–ª—É–∂–±—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
        _showLocationErrorDialog();
        return;
      }

      setState(() {
        _locationAttemptStatus = '–ü–æ–ø—ã—Ç–∫–∞ 1/3 - –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å...';
      });

      // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
      print('üéØ –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å...');
      Position? position;

      try {
        position = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.high,
          timeLimit: const Duration(seconds: 8),
        );
        print(position);
      } catch (e) {
        print('‚ö†Ô∏è –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞: $e');
      }

      // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —Å –º–µ–Ω—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
      if (position == null && mounted) {
        setState(() {
          _locationAttemptStatus = '–ü–æ–ø—ã—Ç–∫–∞ 2/3 - —Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å...';
        });
        print('‚ö° –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —Å–æ —Å—Ä–µ–¥–Ω–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é...');
        await Future.delayed(const Duration(milliseconds: 500));

        try {
          position = await Geolocator.getCurrentPosition(
            desiredAccuracy: LocationAccuracy.medium,
            timeLimit: const Duration(seconds: 12),
          );
        } catch (e) {
          print('‚ö†Ô∏è –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞: $e');
        }
      }

      // –ï—Å–ª–∏ –∏ –≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
      if (position == null && mounted) {
        setState(() {
          _locationAttemptStatus = '–ü–æ–ø—ã—Ç–∫–∞ 3/3 - –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å...';
        });
        print('üîÑ –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é...');
        await Future.delayed(const Duration(milliseconds: 500));

        try {
          position = await Geolocator.getCurrentPosition(
            desiredAccuracy: LocationAccuracy.low,
            timeLimit: const Duration(seconds: 15),
          );
        } catch (e) {
          print('‚ö†Ô∏è –¢—Ä–µ—Ç—å—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞: $e');
        }
      }

      if (position == null) {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å–ª–µ —Ç—Ä–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
        _showLocationErrorDialog();
        return;
      }

      setState(() {
        _locationAttemptStatus = '–ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å...';
      });

      print(
          'üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: ${position.latitude}, ${position.longitude}');
      print('üìè –¢–æ—á–Ω–æ—Å—Ç—å: ${position.accuracy} –º–µ—Ç—Ä–æ–≤');

      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —á–µ—Ä–µ–∑ API
      final addressData = await ApiService.searchAddresses(
        lat: position.latitude,
        lon: position.longitude,
      );

      if (addressData != null && addressData.isNotEmpty) {
        print('üè† –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω: ${addressData.first}');

        final selectedAddress = {
          'address': addressData.first['name'] ??
              addressData.first['description'] ??
              '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å',
          'lat': position.latitude,
          'lon': position.longitude,
          'accuracy': position.accuracy,
          'source': 'geolocation',
          'timestamp': DateTime.now().toIso8601String(),
        };

        print('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å: ${selectedAddress['address']}');

        if (mounted) {
          // –£—Ç–æ—á–Ω–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
          await Navigator.of(context).push(MaterialPageRoute(
            builder: (_) => MapAddressPage(
              initialLat: selectedAddress['lat'],
              initialLon: selectedAddress['lon'],
              onAddressSelected: widget.onAddressSelected,
            ),
          ));
          // Callback already called by MapAddressPage via widget.onAddressSelected
          // MapAddressPage —Å–∞–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∞–¥—Ä–µ—Å —Å –¥–µ—Ç–∞–ª—è–º–∏ –≤ AddressStorageService
        }
      } else {
        print('‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ–± –∞–¥—Ä–µ—Å–µ');
        _showErrorDialog(
            '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é.');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: $e');

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
      if (e.toString().contains('permission') ||
          e.toString().contains('PERMISSION') ||
          e.toString().contains('denied')) {
        _showLocationErrorDialog();
      } else {
        _showErrorDialog(
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: ${e.toString()}');
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoadingLocation = false;
          _locationAttemptStatus = '';
        });
      }
    }
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤
  Future<void> _searchAddresses(String query) async {
    if (query.length < 3) {
      setState(() {
        _searchResults = [];
        _isSearching = false;
      });
      return;
    }

    setState(() {
      _isSearching = true;
      _searchQuery = query;
    });

    try {
      print('üîç –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤: $query');

      final results = await ApiService.searchAddresses(query: query);
      if (results != null && results.isNotEmpty) {
        setState(() {
          _searchResults = List<Map<String, dynamic>>.from(results);
          _isSearching = false;
        });
        print('‚úÖ –ù–∞–π–¥–µ–Ω–æ ${_searchResults.length} –∞–¥—Ä–µ—Å–æ–≤');
        print(_searchResults);
      } else {
        setState(() {
          _searchResults = [];
          _isSearching = false;
        });
        print('üîç –ê–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: $e');
      setState(() {
        _searchResults = [];
        _isSearching = false;
      });
      _showErrorDialog('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${e.toString()}');
    }
  }

  /// –í—ã–±–∏—Ä–∞–µ—Ç –∞–¥—Ä–µ—Å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
  Future<void> _selectSearchResult(Map<String, dynamic> address) async {
    try {
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      final selectedAddress = {
        'address':
            address['name'] ?? address['description'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å',
        'lat': address['point']?['lat'] ?? address['lat'],
        'lon': address['point']?['lon'] ?? address['lon'],
        'source': 'search',
        'timestamp': DateTime.now().toIso8601String(),
      };

      print('üè† –í—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å: $selectedAddress');

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å –ø–æ–ª–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
      if (mounted) {
        final extra = await _askAddressDetails(selectedAddress);
        final full =
            (extra != null) ? {...selectedAddress, ...extra} : selectedAddress;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å —Å –¥–µ—Ç–∞–ª—è–º–∏
        await AddressStorageService.saveSelectedAddress(full);

        // –£—Ç–æ—á–Ω–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ
        final mapRes = await Navigator.of(context)
            .push<Map<String, dynamic>>(MaterialPageRoute(
          builder: (_) => MapAddressPage(
            initialLat: full['lat'],
            initialLon: full['lon'],
            onAddressSelected: widget.onAddressSelected,
          ),
        ));
        if (mapRes != null) {
          full['lat'] = mapRes['lat'];
          full['lon'] = mapRes['lon'];
          // –ü–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
          await AddressStorageService.saveSelectedAddress(full);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        final historyEntry = {
          'name': full['address'],
          'point': {'lat': full['lat'], 'lon': full['lon']},
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (full['apartment']?.toString().isNotEmpty == true) {
          historyEntry['apartment'] = full['apartment'];
        }
        if (full['entrance']?.toString().isNotEmpty == true) {
          historyEntry['entrance'] = full['entrance'];
        }
        if (full['floor']?.toString().isNotEmpty == true) {
          historyEntry['floor'] = full['floor'];
        }
        if (full['other']?.toString().isNotEmpty == true) {
          historyEntry['comment'] = full['other'];
        }

        await AddressStorageService.addToAddressHistory(historyEntry);

        widget.onAddressSelected(full);
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–¥—Ä–µ—Å–∞: $e');
      _showErrorDialog('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: ${e.toString()}');
    }
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –æ—à–∏–±–∫–∏
  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–û—à–∏–±–∫–∞'),
        content: Text(message),
        actions: [
          TextButton(
            child: const Text('OK'),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ],
      ),
    );
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –æ—à–∏–±–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  void _showLocationErrorDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'),
        content: const Text(
          '–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n'
          '1. –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n'
          '2. –í–∫–ª—é—á–∏—Ç—å —Å–ª—É–∂–±—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n'
          '3. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ GPS-—Å–∏–≥–Ω–∞–ª–∞\n'
          '4. –í—ã–π—Ç–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ\n\n'
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é.',
        ),
        actions: [
          TextButton(
            child: const Text('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'),
            onPressed: () {
              Navigator.of(context).pop();
              // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
              _detectLocationAddress();
            },
          ),
          TextButton(
            child: const Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
            onPressed: () async {
              Navigator.of(context).pop();
              await LocationService.instance.openAppSettings();
              // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
              await Future.delayed(const Duration(seconds: 2));
              if (mounted) {
                _detectLocationAddress();
              }
            },
          ),
          TextButton(
            child: const Text('–í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é'),
            onPressed: () async {
              Navigator.of(context).pop();
              // –û—Ç–∫—Ä—ã–≤–∞–µ–º MapAddressPage –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ê–ª–º–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              await Navigator.of(context).push(MaterialPageRoute(
                builder: (_) => MapAddressPage(
                  initialLat: 43.2220,
                  initialLon: 76.8512,
                  onAddressSelected: widget.onAddressSelected,
                ),
              ));
            },
          ),
        ],
      ),
    );
  }

  /// –°—Ç—Ä–æ–∏—Ç –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∞–¥—Ä–µ—Å–∞
  Widget? _buildAddressSubtitle(Map<String, dynamic> addr) {
    final List<String> details = [];

    if (addr['apartment']?.toString().isNotEmpty == true) {
      details.add('–∫–≤. ${addr['apartment']}');
    }
    if (addr['entrance']?.toString().isNotEmpty == true) {
      details.add('–ø–æ–¥—ä–µ–∑–¥ ${addr['entrance']}');
    }
    if (addr['floor']?.toString().isNotEmpty == true) {
      details.add('—ç—Ç–∞–∂ ${addr['floor']}');
    }
    if (addr['comment']?.toString().isNotEmpty == true) {
      details.add('${addr['comment']}');
    }

    if (details.isEmpty) return null;

    return Text(
      details.join(', '),
      style: TextStyle(
        color: Colors.grey[600],
        fontSize: 12,
      ),
    );
  }

  /// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∞–¥—Ä–µ—Å–∞
  Future<Map<String, String>?> _askAddressDetails(
      Map<String, dynamic> address) async {
    String selectedType = '–ö–≤–∞—Ä—Ç–∏—Ä–∞';
    final types = ['–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–û—Ñ–∏—Å', '–î–æ–º', '–î—Ä—É–≥–æ–µ'];
    final apartmentController = TextEditingController();
    final entranceController = TextEditingController();
    final floorController = TextEditingController();
    final otherController = TextEditingController();

    final formKey = GlobalKey<FormState>();
    final result = await showModalBottomSheet<Map<String, String>>(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (ctx) {
        return Padding(
          padding:
              EdgeInsets.only(bottom: MediaQuery.of(ctx).viewInsets.bottom),
          child: Container(
            decoration: BoxDecoration(
              color: Theme.of(ctx).dialogBackgroundColor,
              borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
            ),
            padding: const EdgeInsets.all(16),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Text(
                  '–£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∞–¥—Ä–µ—Å–∞',
                  style: Theme.of(ctx).textTheme.titleLarge,
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 16),
                Form(
                  key: formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      DropdownButtonFormField<String>(
                        value: selectedType,
                        items: types
                            .map((e) =>
                                DropdownMenuItem(value: e, child: Text(e)))
                            .toList(),
                        onChanged: (v) => setState(() => selectedType = v!),
                        decoration: const InputDecoration(
                          labelText: '–¢–∏–ø –∞–¥—Ä–µ—Å–∞',
                          border: OutlineInputBorder(),
                        ),
                      ),
                      const SizedBox(height: 12),
                      TextFormField(
                        controller: apartmentController,
                        decoration: const InputDecoration(
                          labelText: '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
                          border: OutlineInputBorder(),
                        ),
                      ),
                      const SizedBox(height: 12),
                      TextFormField(
                        controller: entranceController,
                        decoration: const InputDecoration(
                          labelText: '–ü–æ–¥—ä–µ–∑–¥',
                          border: OutlineInputBorder(),
                        ),
                      ),
                      const SizedBox(height: 12),
                      TextFormField(
                        controller: floorController,
                        decoration: const InputDecoration(
                          labelText: '–≠—Ç–∞–∂',
                          border: OutlineInputBorder(),
                        ),
                        keyboardType: TextInputType.number,
                      ),
                      const SizedBox(height: 12),
                      TextFormField(
                        controller: otherController,
                        decoration: const InputDecoration(
                          labelText: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                          border: OutlineInputBorder(),
                        ),
                        maxLines: 3,
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () => Navigator.of(ctx).pop(null),
                      child: const Text('–û—Ç–º–µ–Ω–∞'),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: () {
                        if (formKey.currentState?.validate() ?? true) {
                          Navigator.of(ctx).pop({
                            'addressType': selectedType,
                            'apartment': apartmentController.text.trim(),
                            'entrance': entranceController.text.trim(),
                            'floor': floorController.text.trim(),
                            'other': otherController.text.trim(),
                          });
                        }
                      },
                      child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
    return result;
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      height: MediaQuery.of(context).size.height * 0.85,
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.primaryContainer,
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: ListView(
        physics: const ClampingScrollPhysics(),
        padding: EdgeInsets.zero,
        children: [
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫
          Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              border: Border(
                bottom: BorderSide(
                  color: Colors.grey[300]!,
                  width: 0.5,
                ),
              ),
            ),
            child: Column(
              children: [
                Container(
                  width: 40,
                  height: 4,
                  decoration: BoxDecoration(
                    color: Colors.grey[300],
                    borderRadius: BorderRadius.circular(2),
                  ),
                ),
                const SizedBox(height: 16),
                const Text(
                  '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.w600,
                  ),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 8),
              ],
            ),
          ),

          // –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
          Container(
            padding: const EdgeInsets.all(20),
            child: SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: _isLoadingLocation ? null : _detectLocationAddress,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue.withValues(alpha: 0.1),
                  foregroundColor: Colors.blue,
                  elevation: 0,
                  padding: const EdgeInsets.all(16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                    side: BorderSide(color: Colors.blue.withValues(alpha: 0.3)),
                  ),
                ),
                child: _isLoadingLocation
                    ? Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                      Colors.blue),
                                ),
                              ),
                              const SizedBox(width: 12),
                              const Text('–û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...'),
                            ],
                          ),
                          if (_locationAttemptStatus.isNotEmpty) ...[
                            const SizedBox(height: 8),
                            Text(
                              _locationAttemptStatus,
                              style: TextStyle(
                                fontSize: 12,
                                color: Colors.blue.shade600,
                              ),
                            ),
                          ],
                        ],
                      )
                    : Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(
                            Icons.my_location,
                            color: Colors.blue,
                            size: 24,
                          ),
                          const SizedBox(width: 12),
                          const Text(
                            '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏',
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ],
                      ),
              ),
            ),
          ),

          // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ (–∏—Å—Ç–æ—Ä–∏—è)
          FutureBuilder<List<Map<String, dynamic>>>(
            future: AddressStorageService.getAddressHistory(),
            builder: (context, snapshot) {
              if (snapshot.hasData && snapshot.data!.isNotEmpty) {
                return Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Padding(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 20, vertical: 8),
                      child: Text(
                        '–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                    ...snapshot.data!.map((addr) => ListTile(
                          leading: Icon(Icons.history, color: Colors.blue),
                          title: Text(addr['name'] ?? ''),
                          subtitle: _buildAddressSubtitle(addr),
                          onTap: () {
                            // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∞–¥—Ä–µ—Å–∞
                            final fullAddress = {
                              'address': addr['name'],
                              'lat': addr['point']['lat'],
                              'lon': addr['point']['lon'],
                              'source': 'history',
                              'timestamp': DateTime.now().toIso8601String(),
                            };

                            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∞–¥—Ä–µ—Å–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                            if (addr['apartment']?.toString().isNotEmpty ==
                                true) {
                              fullAddress['apartment'] = addr['apartment'];
                            }
                            if (addr['entrance']?.toString().isNotEmpty ==
                                true) {
                              fullAddress['entrance'] = addr['entrance'];
                            }
                            if (addr['floor']?.toString().isNotEmpty == true) {
                              fullAddress['floor'] = addr['floor'];
                            }
                            if (addr['comment']?.toString().isNotEmpty ==
                                true) {
                              fullAddress['comment'] = addr['comment'];
                            }

                            widget.onAddressSelected(fullAddress);
                          },
                        )),
                  ],
                );
              }
              return SizedBox.shrink();
            },
          ),

          // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "–ò–õ–ò"

          // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        ],
      ),
    );
  }
}

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
class AddressSelectionModalHelper {
  static Future<Map<String, dynamic>?> show(BuildContext context) async {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
    final result = await showModalBottomSheet<Map<String, dynamic>>(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (ctx) => SafeArea(
        child: AddressSelectionModal(
          onAddressSelected: (address) {
            Navigator.of(ctx).pop(address);
          },
        ),
      ),
    );
    return result;
  }
}
